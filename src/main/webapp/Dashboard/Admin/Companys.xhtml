<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">
    <head>
        <title>Task-Zen Admin Companys</title>
        <!-- Tailwind CSS -->
        <script src="https://cdn.tailwindcss.com"></script>
        <!-- Chart.js -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <!-- Remix Icons -->
        <link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet" />
        <!-- Font Awesome -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    </head>
    <body>
        <!-- Company Table Data Start -->
        <div class="mb-6 flex justify-between items-center">
            <h1 class="text-3xl font-semibold text-gray-900">Company Projects</h1>
        </div>
        <div class="overflow-x-auto bg-white shadow-md rounded-lg">

            <table class="min-w-full table-auto">
                <thead class="bg-gray-800 text-white">
                    <tr>
                        <!--<th class="px-6 py-3 text-left">Company Picture</th>-->
                        <th class="px-6 py-3 text-left">Company Name</th>
                        <th class="px-6 py-3 text-left">Contact No.</th>
                        <th class="px-6 py-3 text-left">Location</th>
                        <th class="px-6 py-3 text-left">Industry</th>
                        <th class="px-6 py-3 text-left">Establish</th>
                        <th class="px-6 py-3 text-left">Status</th> 
                        <th class="px-6 py-3 text-left">Action</th>
                    </tr>
                </thead>
                <tbody class="text-gray-700" id="client-table-body">
                    <input type="hidden" />
                </tbody>
            </table>
        </div>
        <!-- Company Table Data End -->

        <div class="flex justify-center items-center p-10 h-full">
            <!-- Container for the chart -->
            <div class="flex flex-col lg:flex-row items-center gap-8">
                <!-- Chart Container -->
                <div class="relative w-56 h-56">
                    <canvas id="myChart1"></canvas>
                </div>

                <!-- Info Cards -->
                <div class="space-y-4">
                    <div class="flex items-center p-4 bg-blue-600 text-white rounded-lg shadow-md">
                        <div class="text-2xl font-bold">In Progress</div>
                        <!--<div class="ml-4 text-sm"></div>--> 
                    </div>
                    <div class="flex items-center p-4 bg-green-600 text-white rounded-lg shadow-md">
                        <div class="text-2xl font-bold">Complete</div>
                        <!--<div class="ml-4 text-sm">Work Complited</div>--> 
                    </div>
                    <div class="flex items-center p-4 bg-yellow-600 text-white rounded-lg shadow-md">
                        <div class="text-2xl font-bold">Pending</div>
                        <!--<div class="ml-4 text-sm"></div>--> 
                    </div>
                </div>
            </div>
        </div>

    </body>

    <script>
        // Chart.js setup
        const ctx1 = document.getElementById('myChart1').getContext('2d');
        new Chart(ctx1, {
            type: 'doughnut',
            data: {
                labels: ['20%', '30%', '30%'],
                datasets: [{
                        data: [20, 30, 30],
                        backgroundColor: ['#F59E0B', '#10B981', '#2563EB'],
                        borderWidth: 0,
                        hoverOffset: 10
                    }]
            },
            options: {
                responsive: true,
                cutout: '70%',
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        enabled: false
                    }
                }
            }
        });
        fetch('http://localhost:8000/api/getClientStatusPending')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('client-table-body');

                    // Ensure the data is an array
                    if (Array.isArray(data)) {
                        data.forEach(client => {
                            console.log("The client is:", client); // Log client object to see all fields

                            // Create a new row element
                            const row = document.createElement('tr');

                            // Create and append each table cell (td) to the row
                            const cell1 = document.createElement('td');
                            cell1.classList.add('px-6', 'py-3');
                            cell1.textContent = client.client_name || "No name"; // Fallback if client_name is undefined
                            row.appendChild(cell1);

                            const cell2 = document.createElement('td');
                            cell2.classList.add('px-6', 'py-3');
                            cell2.textContent = client.contact || "No Contact"; // Fallback
                            row.appendChild(cell2);

                            const cell3 = document.createElement('td');
                            cell3.classList.add('px-6', 'py-3');
                            cell3.textContent = client.country || "No Country"; // Fallback
                            row.appendChild(cell3);

                            const cell4 = document.createElement('td');
                            cell4.classList.add('px-6', 'py-3');
                            cell4.textContent = client.industry || "No Industry"; // Fallback
                            row.appendChild(cell4);

                            const cell5 = document.createElement('td');
                            cell5.classList.add('px-6', 'py-3');
                            cell5.textContent = client.establish || "No Establishment Year"; // Fallback
                            row.appendChild(cell5);

                            const cell6 = document.createElement('td');
                            cell6.classList.add('px-6', 'py-3');
                            cell6.textContent = client.status || "No Status"; // Fallback
                            row.appendChild(cell6);
                            const myId = client.client_id;
                            console.log("check" + myId);
                            // Create Approve Button
                            const cell7 = document.createElement('td');
                            const approveButton = document.createElement('button');
                            approveButton.classList.add('px-6', 'py-3', 'bg-green-500', 'text-white', 'rounded', 'hover:bg-green-600');
                            approveButton.textContent = "Approve";

                            // Add click event to the approve button
                            approveButton.addEventListener('click', (event) => {
                                event.preventDefault(); // Prevent default form submission
                                console.log("check2 : " + myId);
                                alert(1);
                                const apiUrl = "http://localhost:8000/api/approveClientStatus/" + myId;
                                alert(apiUrl);
                                console.log("the url is: " + apiUrl);
                                fetch(apiUrl, {
                                    method: 'PUT', // or 'PUT' depending on your API
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                        .then(response => {
                                            if (response.ok) {
                                                console.log("Client " + ${myId} + " approved successfully");
                                                alert("Client approved successfully!");
                                                // Optionally, remove the row from the table
                                                row.remove();
                                            } else {
                                                console.error('Failed to approve client:', response.statusText);
                                                alert("Failed to approve client.");
                                            }
                                        })
                                        .catch(error => {
                                            console.error('Error approving client:', error);
                                            alert("An error occurred while approving the client.");
                                        });
                            });

                            // Append button to the last cell
                            cell7.appendChild(approveButton);
                            row.appendChild(cell7);

                            // Finally, append the row to the table body
                            tableBody.appendChild(row);
                        });
                    } else {
                        // Handle the case when no data is available
                        tableBody.innerHTML = '<tr><td colspan="7" class="text-center">No data available</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                    document.getElementById('client-table-body').innerHTML = '<tr><td colspan="7" class="text-center text-red-500">Error fetching data</td></tr>';
                });

    </script>

</html>
